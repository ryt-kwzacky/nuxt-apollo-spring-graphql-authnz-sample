/*
 * This file is generated by jOOQ.
 */
package com.example.backend.db.generatedJooqCode.tables;


import com.example.backend.db.generatedJooqCode.DefaultSchema;
import com.example.backend.db.generatedJooqCode.Keys;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * Table which is for managing books
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JBooks extends TableImpl<Record> {

    private static final long serialVersionUID = -265365441;

    /**
     * The reference instance of <code>books</code>
     */
    public static final JBooks BOOKS = new JBooks();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>books.id</code>.
     */
    public final TableField<Record, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>books.name</code>.
     */
    public final TableField<Record, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * Create a <code>books</code> table reference
     */
    public JBooks() {
        this(DSL.name("books"), null);
    }

    /**
     * Create an aliased <code>books</code> table reference
     */
    public JBooks(String alias) {
        this(DSL.name(alias), BOOKS);
    }

    /**
     * Create an aliased <code>books</code> table reference
     */
    public JBooks(Name alias) {
        this(alias, BOOKS);
    }

    private JBooks(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private JBooks(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Table which is for managing books"), TableOptions.table());
    }

    public <O extends Record> JBooks(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, BOOKS);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<Record, Integer> getIdentity() {
        return Keys.IDENTITY_BOOKS;
    }

    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.KEY_BOOKS_PRIMARY;
    }

    @Override
    public List<UniqueKey<Record>> getKeys() {
        return Arrays.<UniqueKey<Record>>asList(Keys.KEY_BOOKS_PRIMARY);
    }

    @Override
    public JBooks as(String alias) {
        return new JBooks(DSL.name(alias), this);
    }

    @Override
    public JBooks as(Name alias) {
        return new JBooks(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public JBooks rename(String name) {
        return new JBooks(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JBooks rename(Name name) {
        return new JBooks(name, null);
    }
}
